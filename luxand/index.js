var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var LuxandOriginal = /** @class */ (function (_super) {
    __extends(LuxandOriginal, _super);
    function LuxandOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    LuxandOriginal.prototype.init = function (config) { return cordova(this, "init", {}, arguments); };
    LuxandOriginal.prototype.register = function (params, template, liveness, matchFaces) { return cordova(this, "register", {}, arguments); };
    LuxandOriginal.prototype.compare = function (params, template, liveness, matchFaces) { return cordova(this, "compare", {}, arguments); };
    LuxandOriginal.prototype.clear = function (id) { return cordova(this, "clear", {}, arguments); };
    LuxandOriginal.prototype.clearMemory = function () { return cordova(this, "clearMemory", {}, arguments); };
    LuxandOriginal.pluginName = "Luxand";
    LuxandOriginal.plugin = "codova-plugin-topdata-luxand";
    LuxandOriginal.pluginRef = "window.Luxand";
    LuxandOriginal.repo = "https://github.com/Vinicius-Felipe-T/cordova-plugin-topdata-luxand";
    LuxandOriginal.platforms = ["Android", "iOS"];
    return LuxandOriginal;
}(IonicNativePlugin));
var Luxand = new LuxandOriginal();
export { Luxand };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2x1eGFuZC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQ0EsT0FBTyw4QkFBc0MsTUFBTSxvQkFBb0IsQ0FBQzs7SUEyRjVDLDBCQUFpQjs7OztJQU8zQyxxQkFBSSxhQUFDLE1BQW9CO0lBU3pCLHlCQUFRLGFBQUMsTUFBMkI7SUFTcEMsc0JBQUssYUFBQyxNQUEyQjtJQVNqQyxzQkFBSyxhQUFDLEVBQVU7SUFRaEIsNEJBQVc7Ozs7OztpQkF0SWI7RUE0RjRCLGlCQUFpQjtTQUFoQyxNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29yZG92YSwgSW9uaWNOYXRpdmVQbHVnaW4sIFBsdWdpbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTHV4YW5kQ29uZmlnIHtcbiAgLyoqIFRoZSBsaWNlbmNlIGtleSBnb3R0ZW4gZnJvbSBMdXhhbmQgKi9cbiAgbGljZW5jZTogc3RyaW5nO1xuICAvKiogVGhlIGludGVybmFsIGRhdGFiYXNlIG5hbWUgdGhlIHRyYWNrZXIgc2hvdWxkIHVzZSAqL1xuICBkYm5hbWU6IHN0cmluZztcbiAgLyoqIHRoZSBudW1iZXIgb2YgcmV0cmllcyB3aGVuIHJlZ2lzdGVyaW5nIG9yIGlkZW50aWZ5aW5nIGEgZmFjZSAqL1xuICBsb2dpblRyeUNvdW50OiBudW1iZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgT01MRmFjaWFsRGF0YSB7XG4gIC8qKiBUaGUgc3RhdHVzIG1lc3NhZ2UgKi9cbiAgc3RhdHVzOiBzdHJpbmc7XG4gIC8qKiBUaGUgbWVzc2FnZSByZXR1cm5lZCBieSB0aGUgcGx1Z2luICovXG4gIG1lc3NhZ2U6IHN0cmluZztcbiAgLyoqIFRoZSB1bmlxdWUgbmFtZSBnZW5lcmF0ZWQgYW5kIGFzc29jaWF0ZWQgdG8gYSBmYWNlIHdoZW4gcmVnaXN0ZXJpbmcgKi9cbiAgbmFtZTogc3RyaW5nO1xuICAvKiogVGhlIHVuaXF1ZSBpZCBMdXhhbmQgRmFjZSBTREsgdHJhY2tlciBhc3NvY2lhdGVzIHRvIGEgZmFjZSBpbiBpdCdzIGludGVybmFsIGRhdGFiYXNlICovXG4gIGlkOiBudW1iZXI7XG4gIC8qKiBFeHRyYSBpbmZvcm1hdGlvbiBhYm91dCB0aGUgZmFjZSBpbmNsdWRpbmcgYWdlLCBleHByZXNzaW9ucyAqL1xuICBleHRyYToge1xuICAgIEFHRT86IGFueTtcbiAgICBHRU5ERVI/OiBhbnk7XG4gICAgRVlFU09QRU5FRD86IGFueTtcbiAgICBTTUlMRTogYW55O1xuICB9O1xufVxuXG4vKipcbiAqIEBuYW1lIEx1eGFuZFxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGlzIHBsdWdpbiBsZXQgeW91IGludGVncmF0ZSBMdXhhbmQgRmFjZSBTREsgaW50byB5b3VyIGlvbmljIHByb2plY3RzLCBzbyB5b3UgY2FuIGltcGxlbWVudCBmYWNlIGF1dGhlbnRpY2F0aW9uIGVhc2lseSBpbiB5b3VyIGFwcGxpY2F0aW9uLlxuICpcbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgTHV4YW5kIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9sdXhhbmQnO1xuICpcbiAqXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIGx1eGFuZDogTHV4YW5kKSB7IH1cbiAqXG4gKiAuLi5cbiAqXG4gKiAvL2luaXQgTHV4YW5kICBGYWNlIFNES1xuICpcbiAqIHRoaXMubHV4YW5kLmluaXQoe1xuICogIGxpY2VuY2U6IFwiXCIsXG4gKiAgZGJuYW1lOiBcImRhdGEuZGF0XCIsXG4gKiAgbG9naW5UcnlDb3VudDogM1xuICogfSlcbiAqICAgLnRoZW4oKHJlczogYW55KSA9PiBjb25zb2xlLmxvZyhyZXMpKVxuICogICAuY2F0Y2goKGVycm9yOiBhbnkpID0+IGNvbnNvbGUuZXJyb3IoZXJyb3IpKTtcbiAqIC8vIHJlZ2lzdGVyIGEgZmFjZVxuICogdGhpcy5sdXhhbmQucmVnaXN0ZXIoe1xuICogIHRpbWVvdXQ6IDIwMDAwLy8yMCBzZWNvbmRzXG4gKiB9KVxuICogLnRoZW4ocj0+e1xuICogIGNvbnNvbGUubG9nKFwiWW91ciBGQUNFIElEOlwiLCByLmlkKTtcbiAqICBjb25zb2xlLmxvZyhcIllvdXIgQUdFOlwiLCByLmV4dHJhLkFHRSk7XG4gKiAgY29uc29sZS5sb2coXCJZb3VyIEdFTkRFUjpcIiwgci5leHRyYS5HRU5ERVIpO1xuICogIGNvbnNvbGUubG9nKFwiU0lNSUxJTkc6XCIsIHIuZXh0cmEuU01JTEU+MzU/IFwiWUVTXCI6IFwiTk9cIik7XG4gKiAgY29uc29sZS5sb2coXCJFWUUgT1BFTkVEOlwiLCByLmV4dHJhLkVZRVNPUEVORUQ+NDU/IFwiWUVTXCI6IFwiTk9cIik7XG4gKiB9KVxuICogLmNhdGNoKGVycj0+e1xuICogIGlmKGVyci5tZXNzZ2FlID09PSBcIkFscmVhZHkgcmVnaXN0ZXJlZFwiKSB7XG4gKiAgICAvL2V4dHJhIGRhdGEgYXZhaWxhYmxlXG4gKiAgICBjb25zb2xlLmxvZyhcIllvdXIgQUdFOlwiLCByLmV4dHJhLkFHRSk7XG4gKiAgICBjb25zb2xlLmxvZyhcIllvdXIgR0VOREVSOlwiLCByLmV4dHJhLkdFTkRFUik7XG4gKiAgICBjb25zb2xlLmxvZyhcIlNJTUlMSU5HOlwiLCByLmV4dHJhLlNNSUxFPjM1PyBcIllFU1wiOiBcIk5PXCIpO1xuICogICAgY29uc29sZS5sb2coXCJFWUUgT1BFTkVEOlwiLCByLmV4dHJhLkVZRVNPUEVORUQ+NDU/IFwiWUVTXCI6IFwiTk9cIik7XG4gKiAgfVxuICogfSlcbiAqIC8vdG8gbG9naW4gdXNpbmcgYSBmYWNlXG4gKiB0aGlzLmx1eGFuZC5sb2dpbih7XG4gKiB0aW1lb3V0OiAyMDAwMFxuICogfSkudGhlbihyPT5jb25zb2xlLmxvZyhyKSlcbiAqIC5jYXRjaChlcnI9PmNvbnNvbGUubG9nKGVycikpO1xuICpcbiAqIGBgYFxuICogQGludGVyZmFjZXNcbiAqIE9NTEZhY2lhbERhdGFcbiAqIEx1eGFuZENvbmZpZ1xuICovXG5AUGx1Z2luKHtcbiAgcGx1Z2luTmFtZTogJ0x1eGFuZCcsXG4gIHBsdWdpbjogJ2NvZG92YS1wbHVnaW4tbHV4YW5kJyxcbiAgcGx1Z2luUmVmOiAnd2luZG93Lkx1eGFuZCcsXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vbW9sb2JhbGEvY29yZG92YS1wbHVnaW4tbHV4YW5kJyxcbiAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnaU9TJ10sXG59KVxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEx1eGFuZCBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcbiAgLyoqXG4gICAqIEluaXRpYWxpemUgTHV4YW5kIFNES1xuICAgKiBAcGFyYW0gY29uZmlnIHtMdXhhbmRDb25maWd9IEx1eGFuZENvbmZpZyBjb25maWd1cmF0aW9uIG9iamVjdCB0byB1c2UgdG8gaW5pdCB0aGUgU0RLXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gLy8gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyBpZiBMdXhhbmQgRmFjZVNESyBpcyBpbml0aWFsaXplZCBzdWNjZXNmZnVsbHlcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgaW5pdChjb25maWc6IEx1eGFuZENvbmZpZyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG4gIC8qKlxuICAgKiBJZGVudGlmeSBtZXRob2RlLCB0cnkgdG8gcmVnaXN0ZXIgYSBmYWNlIGluIGludGVybmFsIGRhdGEgYmFzZVxuICAgKiBAcGFyYW0gcGFyYW1zIHthbnl9IEFsbG93IHRvIHNwZWNpZnkgdGhlIHRpbWVvdXQgdmFsdWVcbiAgICogQHJldHVybiB7UHJvbWlzZTxPTUxGYWNpYWxEYXRhPn0gLy8gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlIGlmIGEgZmFjZSBoYXMgYmVlbiBkZXRlY3RlZCBhbmQgc2F2ZWQgYnkgdGhlIHRyYWNrZXIgaW4gdGhlIGludGVybmFsIGRhdGFiYXNlXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHJlZ2lzdGVyKHBhcmFtczogeyB0aW1lb3V0OiBudW1iZXIgfSk6IFByb21pc2U8T01MRmFjaWFsRGF0YT4ge1xuICAgIHJldHVybjtcbiAgfVxuICAvKipcbiAgICogTG9naW4gbWV0aG9kLCB0cnkgdG8gYXV0aGVudGljYXRlZCBhIGZhY2VcbiAgICogQHBhcmFtIHBhcmFtcyB7YW55fSBBbGxvdyB0byBzcGVjaWZ5IHRoZSB0aW1lb3V0IHZhbHVlXG4gICAqIEByZXR1cm4ge1Byb21pc2U8T01MRmFjaWFsRGF0YT59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGxvZ2luKHBhcmFtczogeyB0aW1lb3V0OiBudW1iZXIgfSk6IFByb21pc2U8T01MRmFjaWFsRGF0YT4ge1xuICAgIHJldHVybjsgLy8gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlIGlmIGEgZmFjZSBpcyByZWNvZ25pemUgc3VjY2Vzc2Z1bGx5XG4gIH1cbiAgLyoqXG4gICAqIGNsZWFyIG1ldGhvZCwgdHJ5IHRvIHJlbW92ZSBhIGZhY2UgZnJvbSBpbnRlcm5hbCBkYXRhYmFzZVxuICAgKiBAcGFyYW0gaWQge251bWJlcn1cbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBjbGVhcihpZDogbnVtYmVyKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cbiAgLyoqXG4gICAqIGNsZWFyTWVtb3J5IG1ldGhvZCwgdHJ5IHRvIGNsZWFyIGludGVybmFsIGRhdGFiYXNlXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgY2xlYXJNZW1vcnkoKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cbn1cbiJdfQ==